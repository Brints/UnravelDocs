name: Release Versioning

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Type of version bump (major, minor, patch)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

concurrency:
  group: ${{ github.workflow }}-release
  cancel-in-progress: false

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for git describe and log to work correctly

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Set up Maven
        uses: stCarolas/setup-maven@v5

      - name: Determine bump type and current version
        id: version_info
        run: |
          BUMP_TYPE="${{ github.event.inputs.bump_type || 'patch' }}"
          echo "BUMP_TYPE=${BUMP_TYPE}" >> $GITHUB_ENV

          CURRENT_VERSION_FULL=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          CURRENT_VERSION_CLEAN=$(echo "$CURRENT_VERSION_FULL" | sed 's/-SNAPSHOT//')
          echo "CURRENT_VERSION_CLEAN=${CURRENT_VERSION_CLEAN}" >> $GITHUB_ENV

          echo "Determined bump type: $BUMP_TYPE"
          echo "Current version from pom.xml: $CURRENT_VERSION_FULL"
          echo "Cleaned current version for bumping: $CURRENT_VERSION_CLEAN"

      - name: Bump version and tag
        env:
          BUMP_TYPE: ${{ env.BUMP_TYPE }}
          CURRENT_VERSION_CLEAN: ${{ env.CURRENT_VERSION_CLEAN }}
        run: |
          set -e
          IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION_CLEAN"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}

          # Validate parsed parts are numbers
          if ! [[ "$MAJOR" =~ ^[0-9]+$ ]] || ! [[ "$MINOR" =~ ^[0-9]+$ ]] || ! [[ "$PATCH" =~ ^[0-9]+$ ]]; then
            echo "Error: Parsed version parts are not all numbers: MAJOR=$MAJOR, MINOR=$MINOR, PATCH=$PATCH (from $CURRENT_VERSION_CLEAN)"
            exit 1
          fi

          echo "Current parsed version: MAJOR=$MAJOR, MINOR=$MINOR, PATCH=$PATCH"
          echo "Performing a '$BUMP_TYPE' bump."

          if [ "$BUMP_TYPE" == "major" ]; then
            MAJOR=$((MAJOR + 1))
            MINOR=0
            PATCH=0
          elif [ "$BUMP_TYPE" == "minor" ]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          elif [ "$BUMP_TYPE" == "patch" ]; then
            PATCH=$((PATCH + 1))
          else
            echo "Warning: Invalid BUMP_TYPE '$BUMP_TYPE'. Defaulting to patch bump."
            PATCH=$((PATCH + 1))
          fi

          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "Calculated new version: $NEW_VERSION"

          # Update pom.xml with the new version. -DgenerateBackupPoms=false prevents pom.xml.versionsBackup files.
          mvn versions:set -DnewVersion="$NEW_VERSION" -DgenerateBackupPoms=false
          
          # Configure git user
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Commit the version change and tag
          git commit -am "chore(release): $NEW_VERSION"
          git tag "v$NEW_VERSION"
          git push origin main --tags

      - name: Generate changelog
        id: changelog
        run: |
          set -e
          git fetch --tags
          # Get the tag before the one just created (HEAD~1 refers to the commit before the tag commit)
          # If it's the very first tag, LATEST_TAG might be the initial commit hash.
          LATEST_TAG=$(git describe --tags --abbrev=0 HEAD~1^) || LATEST_TAG=$(git rev-list --max-parents=0 HEAD)
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
          # Changelog from LATEST_TAG to the commit *before* the release commit (HEAD^)
          CHANGELOG=$(git log $LATEST_TAG..HEAD^ --pretty=format:"* %s")
          echo "$CHANGELOG" > changelog.txt
          echo "Changelog generated between $LATEST_TAG and HEAD^"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.NEW_VERSION }}
          name: UnravelDocs v${{ env.NEW_VERSION }}
          body_path: changelog.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}